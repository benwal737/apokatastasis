generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  imageUrl       String    @db.Text
  externalUserId String    @unique
  bio            String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]
  rooms          Room[]
  povs           Pov[]
}

model Room {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  isLive    Boolean  @default(false)
  hostId    String
  host      User     @relation(fields: [hostId], references: [id])
  createdAt DateTime @default(now())

  povs        Pov[]
  joinCode    String      @unique @default(cuid())
  chatEnabled Boolean     @default(true)
  messages    Message[]
  egress      RoomEgress?
}

model RoomEgress {
  id             String  @id @default(cuid())
  roomId         String  @unique
  room           Room    @relation(fields: [roomId], references: [id])
  // If you broadcast to HLS/CDN or restream:
  hlsPlaybackUrl String?
  recordingOn    Boolean @default(false)
}

model Pov {
  id     String @id @default(cuid())
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])
  label  String
  // sourceType String // webrtc | ingress_rtmp | ingress_whip
  order  Int    @default(0)
  status String @default("offline") // offline | live | pending

  // If this POV is fed by LiveKit Ingress (OBS/hardware), store it here:
  ingressId String // livekit ingress resource ID
  serverUrl String
  streamKey String

  // If this POV is driven by a browser publisher, link the participant:
  // currentPublisherId String?      @unique
  // currentPublisher   Participant? @relation("PovPublisher", fields: [currentPublisherId], references: [id])
  username String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

// model Participant {
//   id          String   @id @default(cuid())
//   roomId      String
//   room        Room     @relation(fields: [roomId], references: [id])
//   userId      String
//   user        User     @relation(fields: [userId], references: [id])
//   displayName String
//   role        String // host | contributor
//   joinedAt    DateTime @default(now())
//   lastSeenAt  DateTime @default(now())

//   // reverse side of the "currentPublisher" relation:
//   // publishedPov Pov?    @relation("PovPublisher", fields: [povId], references: [id])
//   povId        String?
// }

model Message {
  id       String   @id @default(cuid())
  roomId   String
  room     Room     @relation(fields: [roomId], references: [id])
  senderId String?
  sender   User?    @relation(fields: [senderId], references: [id])
  content  String
  sentAt   DateTime @default(now())
}
